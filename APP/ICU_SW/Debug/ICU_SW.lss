
ICU_SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000b12  00000ba6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800074  00800074  00000bba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000145f  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a3  00000000  00000000  0000224f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b16  00000000  00000000  00002bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a4  00000000  00000000  00003708  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000842  00000000  00000000  00003aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aa4  00000000  00000000  000042ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00004d92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 28 03 	jmp	0x650	; 0x650 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e1       	ldi	r30, 0x12	; 18
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 38       	cpi	r26, 0x83	; 131
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 86 02 	call	0x50c	; 0x50c <main>
  8a:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidInitialization>:

/* Description : Initialize PINS Directions       */

void DIO_voidInitialization (void)
{
	DDRA = DIO_u8_PORTA_DIRECTIONS;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
	DDRB = DIO_u8_PORTB_DIRECTIONS;
  96:	87 bb       	out	0x17, r24	; 23
	DDRC = DIO_u8_PORTC_DIRECTIONS;
  98:	84 e1       	ldi	r24, 0x14	; 20
  9a:	84 bb       	out	0x14, r24	; 20
	DDRD = DIO_u8_PORTD_DIRECTIONS;
  9c:	8b ef       	ldi	r24, 0xFB	; 251
  9e:	81 bb       	out	0x11, r24	; 17
  a0:	08 95       	ret

000000a2 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8PinNumber , u8 Copy_u8PinValue)
{

	/*   FIND PORT A PINS                          */
	if (Copy_u8PinNumber >= DIO_u8_PORTA_START && Copy_u8PinNumber <= DIO_u8_PORTA_END)
  a2:	88 30       	cpi	r24, 0x08	; 8
  a4:	e8 f4       	brcc	.+58     	; 0xe0 <DIO_voidSetPinValue+0x3e>
	{
		/*  Check value passed to fuction HIGH    */

		if (Copy_u8PinValue == DIO_u8_HIGH )
  a6:	61 30       	cpi	r22, 0x01	; 1
  a8:	69 f4       	brne	.+26     	; 0xc4 <DIO_voidSetPinValue+0x22>
		{
			/*   MAKE pin numer Copy_u8PinNumber HIGH */

			SET_BIT(PORTA , Copy_u8PinNumber);
  aa:	4b b3       	in	r20, 0x1b	; 27
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	b9 01       	movw	r22, r18
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_voidSetPinValue+0x16>
  b4:	66 0f       	add	r22, r22
  b6:	77 1f       	adc	r23, r23
  b8:	8a 95       	dec	r24
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_voidSetPinValue+0x12>
  bc:	cb 01       	movw	r24, r22
  be:	84 2b       	or	r24, r20
  c0:	8b bb       	out	0x1b, r24	; 27
  c2:	08 95       	ret
		/*  Check value passed to fuction LOW    */
		else 
		{
			/*   MAKE pin numer Copy_u8PinNumber LOW */

			CLEAR_BIT(PORTA, Copy_u8PinNumber);
  c4:	4b b3       	in	r20, 0x1b	; 27
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	b9 01       	movw	r22, r18
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_voidSetPinValue+0x30>
  ce:	66 0f       	add	r22, r22
  d0:	77 1f       	adc	r23, r23
  d2:	8a 95       	dec	r24
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_voidSetPinValue+0x2c>
  d6:	cb 01       	movw	r24, r22
  d8:	80 95       	com	r24
  da:	84 23       	and	r24, r20
  dc:	8b bb       	out	0x1b, r24	; 27
  de:	08 95       	ret
		}

	}
	/*   FIND PORT B PINS                          */
	else if (Copy_u8PinNumber >= DIO_u8_PORTB_START && Copy_u8PinNumber <= DIO_u8_PORTB_END)
  e0:	98 ef       	ldi	r25, 0xF8	; 248
  e2:	98 0f       	add	r25, r24
  e4:	98 30       	cpi	r25, 0x08	; 8
  e6:	e8 f4       	brcc	.+58     	; 0x122 <DIO_voidSetPinValue+0x80>
	{
		Copy_u8PinNumber = Copy_u8PinNumber - DIO_u8_PORTA_SIZE ; 

		if (Copy_u8PinValue == DIO_u8_HIGH )
  e8:	61 30       	cpi	r22, 0x01	; 1
  ea:	69 f4       	brne	.+26     	; 0x106 <DIO_voidSetPinValue+0x64>
		{
			SET_BIT (PORTB , Copy_u8PinNumber);
  ec:	48 b3       	in	r20, 0x18	; 24
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	b9 01       	movw	r22, r18
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_voidSetPinValue+0x58>
  f6:	66 0f       	add	r22, r22
  f8:	77 1f       	adc	r23, r23
  fa:	9a 95       	dec	r25
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_voidSetPinValue+0x54>
  fe:	cb 01       	movw	r24, r22
 100:	84 2b       	or	r24, r20
 102:	88 bb       	out	0x18, r24	; 24
 104:	08 95       	ret
		}
		else 
		{
			CLEAR_BIT(PORTB , Copy_u8PinNumber);
 106:	48 b3       	in	r20, 0x18	; 24
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	b9 01       	movw	r22, r18
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_voidSetPinValue+0x72>
 110:	66 0f       	add	r22, r22
 112:	77 1f       	adc	r23, r23
 114:	9a 95       	dec	r25
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_voidSetPinValue+0x6e>
 118:	cb 01       	movw	r24, r22
 11a:	80 95       	com	r24
 11c:	84 23       	and	r24, r20
 11e:	88 bb       	out	0x18, r24	; 24
 120:	08 95       	ret
		}

	}
	/*   FIND PORT C PINS                          */
	else if(Copy_u8PinNumber >= DIO_u8_PORTC_START &&  Copy_u8PinNumber <= DIO_u8_PORTC_END)
 122:	90 ef       	ldi	r25, 0xF0	; 240
 124:	98 0f       	add	r25, r24
 126:	98 30       	cpi	r25, 0x08	; 8
 128:	e8 f4       	brcc	.+58     	; 0x164 <DIO_voidSetPinValue+0xc2>
	{
		Copy_u8PinNumber = Copy_u8PinNumber - ( DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE ) ; 

		if (Copy_u8PinValue == DIO_u8_HIGH )
 12a:	61 30       	cpi	r22, 0x01	; 1
 12c:	69 f4       	brne	.+26     	; 0x148 <DIO_voidSetPinValue+0xa6>
		{
			SET_BIT (PORTC , Copy_u8PinNumber);
 12e:	45 b3       	in	r20, 0x15	; 21
 130:	21 e0       	ldi	r18, 0x01	; 1
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	b9 01       	movw	r22, r18
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_voidSetPinValue+0x9a>
 138:	66 0f       	add	r22, r22
 13a:	77 1f       	adc	r23, r23
 13c:	9a 95       	dec	r25
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_voidSetPinValue+0x96>
 140:	cb 01       	movw	r24, r22
 142:	84 2b       	or	r24, r20
 144:	85 bb       	out	0x15, r24	; 21
 146:	08 95       	ret
		}
		else 
		{
			CLEAR_BIT(PORTC , Copy_u8PinNumber);
 148:	45 b3       	in	r20, 0x15	; 21
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	b9 01       	movw	r22, r18
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_voidSetPinValue+0xb4>
 152:	66 0f       	add	r22, r22
 154:	77 1f       	adc	r23, r23
 156:	9a 95       	dec	r25
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_voidSetPinValue+0xb0>
 15a:	cb 01       	movw	r24, r22
 15c:	80 95       	com	r24
 15e:	84 23       	and	r24, r20
 160:	85 bb       	out	0x15, r24	; 21
 162:	08 95       	ret
		}	
	}
	/*   FIND PORT D PINS                          */
	else if(Copy_u8PinNumber >= DIO_u8_PORTD_START &&  Copy_u8PinNumber <= DIO_u8_PORTD_END)
 164:	88 51       	subi	r24, 0x18	; 24
 166:	88 30       	cpi	r24, 0x08	; 8
 168:	e0 f4       	brcc	.+56     	; 0x1a2 <DIO_voidSetPinValue+0x100>
	{

		Copy_u8PinNumber = Copy_u8PinNumber - ( DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE ) ; 

		if (Copy_u8PinValue == DIO_u8_HIGH )
 16a:	61 30       	cpi	r22, 0x01	; 1
 16c:	69 f4       	brne	.+26     	; 0x188 <DIO_voidSetPinValue+0xe6>
		{
			SET_BIT (PORTD , Copy_u8PinNumber);
 16e:	42 b3       	in	r20, 0x12	; 18
 170:	21 e0       	ldi	r18, 0x01	; 1
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	b9 01       	movw	r22, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_voidSetPinValue+0xda>
 178:	66 0f       	add	r22, r22
 17a:	77 1f       	adc	r23, r23
 17c:	8a 95       	dec	r24
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_voidSetPinValue+0xd6>
 180:	cb 01       	movw	r24, r22
 182:	84 2b       	or	r24, r20
 184:	82 bb       	out	0x12, r24	; 18
 186:	08 95       	ret
		}
		else 
		{
			CLEAR_BIT(PORTD , Copy_u8PinNumber);
 188:	42 b3       	in	r20, 0x12	; 18
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	b9 01       	movw	r22, r18
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_voidSetPinValue+0xf4>
 192:	66 0f       	add	r22, r22
 194:	77 1f       	adc	r23, r23
 196:	8a 95       	dec	r24
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_voidSetPinValue+0xf0>
 19a:	cb 01       	movw	r24, r22
 19c:	80 95       	com	r24
 19e:	84 23       	and	r24, r20
 1a0:	82 bb       	out	0x12, r24	; 18
 1a2:	08 95       	ret

000001a4 <EXT0_voidInit>:
/****************************************************************/

void EXT0_voidDisable()
{
	
	CLEAR_BIT( GICR , 6 );
 1a4:	8b b7       	in	r24, 0x3b	; 59
 1a6:	8f 7b       	andi	r24, 0xBF	; 191
 1a8:	8b bf       	out	0x3b, r24	; 59
 1aa:	8a b7       	in	r24, 0x3a	; 58
 1ac:	80 64       	ori	r24, 0x40	; 64
 1ae:	8a bf       	out	0x3a, r24	; 58
 1b0:	08 95       	ret

000001b2 <EXT0_voidEnable>:
 1b2:	8b b7       	in	r24, 0x3b	; 59
 1b4:	80 64       	ori	r24, 0x40	; 64
 1b6:	8b bf       	out	0x3b, r24	; 59
 1b8:	08 95       	ret

000001ba <EXT0_voidCallBack>:
/****************************************************************/

void EXT0_voidCallBack(pf addresscpy)
{
	
	x = addresscpy;
 1ba:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <x+0x1>
 1be:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <x>
 1c2:	08 95       	ret

000001c4 <EXT0_voidSetSignalch>:
/*     				 initialized 							    */
/****************************************************************/
void EXT0_voidSetSignalch(u8 SenseCpy)
{
	
	if (SenseCpy == IOC)
 1c4:	81 30       	cpi	r24, 0x01	; 1
 1c6:	39 f4       	brne	.+14     	; 0x1d6 <EXT0_voidSetSignalch+0x12>
	{
	 SET_BIT(MCUCR , 0);
 1c8:	85 b7       	in	r24, 0x35	; 53
 1ca:	81 60       	ori	r24, 0x01	; 1
 1cc:	85 bf       	out	0x35, r24	; 53
	 CLEAR_BIT(MCUCR , 1);
 1ce:	85 b7       	in	r24, 0x35	; 53
 1d0:	8d 7f       	andi	r24, 0xFD	; 253
 1d2:	85 bf       	out	0x35, r24	; 53
 1d4:	08 95       	ret
	}
	else if (SenseCpy == RISING)
 1d6:	87 30       	cpi	r24, 0x07	; 7
 1d8:	39 f4       	brne	.+14     	; 0x1e8 <EXT0_voidSetSignalch+0x24>
	{
	 SET_BIT(MCUCR , 0);
 1da:	85 b7       	in	r24, 0x35	; 53
 1dc:	81 60       	ori	r24, 0x01	; 1
 1de:	85 bf       	out	0x35, r24	; 53
	 SET_BIT(MCUCR , 1);
 1e0:	85 b7       	in	r24, 0x35	; 53
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	85 bf       	out	0x35, r24	; 53
 1e6:	08 95       	ret
	}
	else if (SenseCpy == FALLING)
 1e8:	84 30       	cpi	r24, 0x04	; 4
 1ea:	39 f4       	brne	.+14     	; 0x1fa <EXT0_voidSetSignalch+0x36>
	{
	 CLEAR_BIT(MCUCR , 0);
 1ec:	85 b7       	in	r24, 0x35	; 53
 1ee:	8e 7f       	andi	r24, 0xFE	; 254
 1f0:	85 bf       	out	0x35, r24	; 53
	 SET_BIT(MCUCR , 1);
 1f2:	85 b7       	in	r24, 0x35	; 53
 1f4:	82 60       	ori	r24, 0x02	; 2
 1f6:	85 bf       	out	0x35, r24	; 53
 1f8:	08 95       	ret
	}
	else if (SenseCpy == LOW_LEVEL)
 1fa:	8a 30       	cpi	r24, 0x0A	; 10
 1fc:	31 f4       	brne	.+12     	; 0x20a <EXT0_voidSetSignalch+0x46>
	{
	 CLEAR_BIT(MCUCR , 0);
 1fe:	85 b7       	in	r24, 0x35	; 53
 200:	8e 7f       	andi	r24, 0xFE	; 254
 202:	85 bf       	out	0x35, r24	; 53
	 CLEAR_BIT(MCUCR , 1);
 204:	85 b7       	in	r24, 0x35	; 53
 206:	8d 7f       	andi	r24, 0xFD	; 253
 208:	85 bf       	out	0x35, r24	; 53
 20a:	08 95       	ret

0000020c <__vector_1>:
*/
/** Linker Problem solved */

void __vector_1(void) __attribute__(( signal , used ));
void __vector_1(void)
{
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	2f 93       	push	r18
 218:	3f 93       	push	r19
 21a:	4f 93       	push	r20
 21c:	5f 93       	push	r21
 21e:	6f 93       	push	r22
 220:	7f 93       	push	r23
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
 226:	af 93       	push	r26
 228:	bf 93       	push	r27
 22a:	ef 93       	push	r30
 22c:	ff 93       	push	r31
	x();  // EXT0_APP();
 22e:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <x>
 232:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <x+0x1>
 236:	09 95       	icall
	
}
 238:	ff 91       	pop	r31
 23a:	ef 91       	pop	r30
 23c:	bf 91       	pop	r27
 23e:	af 91       	pop	r26
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	7f 91       	pop	r23
 246:	6f 91       	pop	r22
 248:	5f 91       	pop	r21
 24a:	4f 91       	pop	r20
 24c:	3f 91       	pop	r19
 24e:	2f 91       	pop	r18
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <GIE_voidEnable>:
	/***********************************************************/	
	/** !comment : From Data Sheet : To Enable GIE you must	   */
	/**            set Bit Number 7 in SREG REGISTER by 1      */
	/***********************************************************/

	SET_BIT(SREG , 7);
 25a:	8f b7       	in	r24, 0x3f	; 63
 25c:	80 68       	ori	r24, 0x80	; 128
 25e:	8f bf       	out	0x3f, r24	; 63
 260:	08 95       	ret

00000262 <vidPutOnBus>:
	/* take data pass data bu */
	vidPutOnBus(u8CharCpy);
}

static void vidPutOnBus( u8 u8CmdDataCpy )
{
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
	u8 LOC_u8Loop = LCD_DATA_D0_START ;

	DIO_voidSetPinValue( LCD_u8DATA_0 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 266:	c8 2f       	mov	r28, r24
 268:	d0 e0       	ldi	r29, 0x00	; 0
 26a:	68 2f       	mov	r22, r24
 26c:	61 70       	andi	r22, 0x01	; 1
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_1 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 274:	be 01       	movw	r22, r28
 276:	75 95       	asr	r23
 278:	67 95       	ror	r22
 27a:	61 70       	andi	r22, 0x01	; 1
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_2 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 282:	be 01       	movw	r22, r28
 284:	75 95       	asr	r23
 286:	67 95       	ror	r22
 288:	75 95       	asr	r23
 28a:	67 95       	ror	r22
 28c:	61 70       	andi	r22, 0x01	; 1
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_3 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 294:	be 01       	movw	r22, r28
 296:	75 95       	asr	r23
 298:	67 95       	ror	r22
 29a:	75 95       	asr	r23
 29c:	67 95       	ror	r22
 29e:	75 95       	asr	r23
 2a0:	67 95       	ror	r22
 2a2:	61 70       	andi	r22, 0x01	; 1
 2a4:	83 e0       	ldi	r24, 0x03	; 3
 2a6:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_4 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 2aa:	be 01       	movw	r22, r28
 2ac:	75 95       	asr	r23
 2ae:	67 95       	ror	r22
 2b0:	75 95       	asr	r23
 2b2:	67 95       	ror	r22
 2b4:	75 95       	asr	r23
 2b6:	67 95       	ror	r22
 2b8:	75 95       	asr	r23
 2ba:	67 95       	ror	r22
 2bc:	61 70       	andi	r22, 0x01	; 1
 2be:	84 e0       	ldi	r24, 0x04	; 4
 2c0:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_5 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 2c4:	be 01       	movw	r22, r28
 2c6:	75 95       	asr	r23
 2c8:	67 95       	ror	r22
 2ca:	75 95       	asr	r23
 2cc:	67 95       	ror	r22
 2ce:	75 95       	asr	r23
 2d0:	67 95       	ror	r22
 2d2:	75 95       	asr	r23
 2d4:	67 95       	ror	r22
 2d6:	75 95       	asr	r23
 2d8:	67 95       	ror	r22
 2da:	61 70       	andi	r22, 0x01	; 1
 2dc:	85 e0       	ldi	r24, 0x05	; 5
 2de:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_6 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 2e2:	be 01       	movw	r22, r28
 2e4:	06 2e       	mov	r0, r22
 2e6:	67 2f       	mov	r22, r23
 2e8:	00 0c       	add	r0, r0
 2ea:	66 1f       	adc	r22, r22
 2ec:	77 0b       	sbc	r23, r23
 2ee:	00 0c       	add	r0, r0
 2f0:	66 1f       	adc	r22, r22
 2f2:	77 1f       	adc	r23, r23
 2f4:	61 70       	andi	r22, 0x01	; 1
 2f6:	86 e0       	ldi	r24, 0x06	; 6
 2f8:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_7 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 2fc:	cc 0f       	add	r28, r28
 2fe:	cd 2f       	mov	r28, r29
 300:	cc 1f       	adc	r28, r28
 302:	dd 0b       	sbc	r29, r29
 304:	6c 2f       	mov	r22, r28
 306:	61 70       	andi	r22, 0x01	; 1
 308:	87 e0       	ldi	r24, 0x07	; 7
 30a:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>

	/* lach  */
	DIO_voidSetPinValue( LCD_u8EN , DIO_u8_HIGH );
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	8c e1       	ldi	r24, 0x1C	; 28
 312:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 316:	83 ef       	ldi	r24, 0xF3	; 243
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <vidPutOnBus+0xb8>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <vidPutOnBus+0xbe>
 320:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue( LCD_u8EN , DIO_u8_LOW );
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	8c e1       	ldi	r24, 0x1C	; 28
 326:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 32a:	83 ef       	ldi	r24, 0xF3	; 243
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <vidPutOnBus+0xcc>
 332:	00 c0       	rjmp	.+0      	; 0x334 <vidPutOnBus+0xd2>
 334:	00 00       	nop
	_delay_ms(2);

}
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

0000033c <LCD_vidSendCmd>:
	DIO_voidSetPinValue( LCD_u8EN , DIO_u8_LOW );

}

void LCD_vidSendCmd( u8 u8CmdCpy )
{
 33c:	cf 93       	push	r28
 33e:	c8 2f       	mov	r28, r24
	/** to send command  ( RS = 0 and R/W = 0 ) =====> (write instruction) */

	/* RS  0 CMD */  
	DIO_voidSetPinValue( LCD_u8RS , DIO_u8_LOW );
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	88 e1       	ldi	r24, 0x18	; 24
 344:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	/* write 0 CMD*/
	DIO_voidSetPinValue( LCD_u8RW , DIO_u8_LOW );
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	89 e1       	ldi	r24, 0x19	; 25
 34c:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>

	/* take data pass data bu */
	vidPutOnBus(u8CmdCpy);
 350:	8c 2f       	mov	r24, r28
 352:	0e 94 31 01 	call	0x262	; 0x262 <vidPutOnBus>

}
 356:	cf 91       	pop	r28
 358:	08 95       	ret

0000035a <LCD_vidWriteChar>:

void LCD_vidWriteChar( u8 u8CharCpy )
{
 35a:	cf 93       	push	r28
 35c:	c8 2f       	mov	r28, r24
	/** to write command   ( RS = 1 and R/W = 0 ) =====> (write to DR Reg) */

	/* RS  1 CMD */
	DIO_voidSetPinValue( LCD_u8RS , DIO_u8_HIGH );
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	88 e1       	ldi	r24, 0x18	; 24
 362:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	/* write 0 CMD*/
	DIO_voidSetPinValue( LCD_u8RW , DIO_u8_LOW );
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	89 e1       	ldi	r24, 0x19	; 25
 36a:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>

	/* take data pass data bu */
	vidPutOnBus(u8CharCpy);
 36e:	8c 2f       	mov	r24, r28
 370:	0e 94 31 01 	call	0x262	; 0x262 <vidPutOnBus>
}
 374:	cf 91       	pop	r28
 376:	08 95       	ret

00000378 <LCD_vidClear>:
}

void LCD_vidClear( void )
{
	/*  function set (Clear  Display) */
	LCD_vidSendCmd(0b00000001);
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_vidSendCmd>
 37e:	83 ef       	ldi	r24, 0xF3	; 243
 380:	91 e0       	ldi	r25, 0x01	; 1
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <LCD_vidClear+0xa>
 386:	00 c0       	rjmp	.+0      	; 0x388 <LCD_vidClear+0x10>
 388:	00 00       	nop
 38a:	08 95       	ret

0000038c <LCD_vidInit>:
 38c:	8d e2       	ldi	r24, 0x2D	; 45
 38e:	92 e2       	ldi	r25, 0x22	; 34
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <LCD_vidInit+0x4>
 394:	00 c0       	rjmp	.+0      	; 0x396 <LCD_vidInit+0xa>
 396:	00 00       	nop
	/* wait 35 */
	_delay_ms(35);

	/*  function set */

	LCD_vidSendCmd(0b00111000);
 398:	88 e3       	ldi	r24, 0x38	; 56
 39a:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_vidSendCmd>
 39e:	89 ef       	ldi	r24, 0xF9	; 249
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <LCD_vidInit+0x16>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <LCD_vidInit+0x1c>
 3a8:	00 00       	nop
	/* wait 1 */
	_delay_ms(1);

	/*  function set (on/off) */
	LCD_vidSendCmd(0b00001100);
 3aa:	8c e0       	ldi	r24, 0x0C	; 12
 3ac:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_vidSendCmd>
 3b0:	89 ef       	ldi	r24, 0xF9	; 249
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <LCD_vidInit+0x28>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <LCD_vidInit+0x2e>
 3ba:	00 00       	nop
	/*LCD_vidSendCmd(0b00000001);*/
	/*	 wait 2                  */
	/*_delay_ms(2);	             */
	/*****************************/

	LCD_vidClear();
 3bc:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_vidClear>

	/*  function set (Entry mode set - cursor increase or decrease ) */
	LCD_vidSendCmd(0b00000110);
 3c0:	86 e0       	ldi	r24, 0x06	; 6
 3c2:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_vidSendCmd>
 3c6:	83 ef       	ldi	r24, 0xF3	; 243
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <LCD_vidInit+0x3e>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <LCD_vidInit+0x44>
 3d0:	00 00       	nop
	/* wait 2 */
	_delay_ms(2);

	/* latch = 0 */
	DIO_voidSetPinValue( LCD_u8EN , DIO_u8_LOW );
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	8c e1       	ldi	r24, 0x1C	; 28
 3d6:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 3da:	08 95       	ret

000003dc <LCD_vidGotoXY>:


void LCD_vidGotoXY( u8 u8LineNbCpy , u8 u8CharNbCpy )
{
 /* switchcase over line */
	if(  u8LineNbCpy == 1 )
 3dc:	81 30       	cpi	r24, 0x01	; 1
 3de:	29 f4       	brne	.+10     	; 0x3ea <LCD_vidGotoXY+0xe>
	{
		/*  function set (Line1 position " x ") */
		LCD_vidSendCmd( (LCD_BEGINNING_FIRST_LINE + u8CharNbCpy) );
 3e0:	80 e8       	ldi	r24, 0x80	; 128
 3e2:	86 0f       	add	r24, r22
 3e4:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_vidSendCmd>
 3e8:	08 95       	ret
			
	}
	
	else if(  u8LineNbCpy == 2 )
 3ea:	82 30       	cpi	r24, 0x02	; 2
 3ec:	21 f4       	brne	.+8      	; 0x3f6 <LCD_vidGotoXY+0x1a>
	{
		/*  function set (Line1 position " x ") */
		LCD_vidSendCmd( (LCD_BEGINNING_SECOND_LINE + u8CharNbCpy) );
 3ee:	80 ec       	ldi	r24, 0xC0	; 192
 3f0:	86 0f       	add	r24, r22
 3f2:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_vidSendCmd>
 3f6:	08 95       	ret

000003f8 <LCD_vidWriteString>:
}


/* warnning avoid (u8*)"ahmed" */
void LCD_vidWriteString( u8 * pu8StringCpy )
{
 3f8:	0f 93       	push	r16
 3fa:	1f 93       	push	r17
 3fc:	cf 93       	push	r28
 3fe:	8c 01       	movw	r16, r24
	u8 Loc_u8Counter = 0 ;
 400:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(pu8StringCpy[Loc_u8Counter] !='\0')
 402:	03 c0       	rjmp	.+6      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	{
		LCD_vidWriteChar(pu8StringCpy[Loc_u8Counter]);
 404:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_vidWriteChar>
		Loc_u8Counter++;		
 408:	cf 5f       	subi	r28, 0xFF	; 255
/* warnning avoid (u8*)"ahmed" */
void LCD_vidWriteString( u8 * pu8StringCpy )
{
	u8 Loc_u8Counter = 0 ;
	
	while(pu8StringCpy[Loc_u8Counter] !='\0')
 40a:	f8 01       	movw	r30, r16
 40c:	ec 0f       	add	r30, r28
 40e:	f1 1d       	adc	r31, r1
 410:	80 81       	ld	r24, Z
 412:	81 11       	cpse	r24, r1
 414:	f7 cf       	rjmp	.-18     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		LCD_vidWriteChar(pu8StringCpy[Loc_u8Counter]);
		Loc_u8Counter++;		
	}
	

}
 416:	cf 91       	pop	r28
 418:	1f 91       	pop	r17
 41a:	0f 91       	pop	r16
 41c:	08 95       	ret

0000041e <TOVF_APP>:
void TOVF_APP (void)
//void __vector_11 (void) __attribute__ ((signal,used, externally_visible)) ;
//void __vector_11 (void)
//ISR(TIMER0_OVF_vect)
{
	ovf++;
 41e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <ovf>
 422:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <ovf+0x1>
 426:	01 96       	adiw	r24, 0x01	; 1
 428:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <ovf+0x1>
 42c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <ovf>
 430:	08 95       	ret

00000432 <EXTI0_APP>:
void EXTI0_APP (void)
//void __vector_1 (void) __attribute__ ((signal,used, externally_visible));
//void __vector_1 (void)
//ISR(INT0_vect)
{
	if(flag==0)
 432:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <flag>
 436:	81 11       	cpse	r24, r1
 438:	0d c0       	rjmp	.+26     	; 0x454 <EXTI0_APP+0x22>
	{
		TIMER0_void_setTCNT0(0);
 43a:	0e 94 1b 03 	call	0x636	; 0x636 <TIMER0_void_setTCNT0>
		EXT0_voidSetSignalch(FALLING);
 43e:	84 e0       	ldi	r24, 0x04	; 4
 440:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <EXT0_voidSetSignalch>
		flag = 1;
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <flag>
		ovf = 0;
 44a:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <ovf+0x1>
 44e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <ovf>
 452:	08 95       	ret
	}
	else if (flag ==1)
 454:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <flag>
 458:	81 30       	cpi	r24, 0x01	; 1
 45a:	51 f5       	brne	.+84     	; 0x4b0 <EXTI0_APP+0x7e>
	{
		ton = ((1024.0/8000000.0) * (float)(TIMER0_void_getTCNT0() + (ovf * 256)));
 45c:	0e 94 1d 03 	call	0x63a	; 0x63a <TIMER0_void_getTCNT0>
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	70 91 7c 00 	lds	r23, 0x007C	; 0x80007c <ovf>
 468:	68 0f       	add	r22, r24
 46a:	71 1d       	adc	r23, r1
 46c:	07 2e       	mov	r0, r23
 46e:	00 0c       	add	r0, r0
 470:	88 0b       	sbc	r24, r24
 472:	99 0b       	sbc	r25, r25
 474:	0e 94 66 04 	call	0x8cc	; 0x8cc <__floatsisf>
 478:	2d eb       	ldi	r18, 0xBD	; 189
 47a:	37 e3       	ldi	r19, 0x37	; 55
 47c:	46 e0       	ldi	r20, 0x06	; 6
 47e:	59 e3       	ldi	r21, 0x39	; 57
 480:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__mulsf3>
 484:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <ton>
 488:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <ton+0x1>
 48c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <ton+0x2>
 490:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <ton+0x3>
		TIMER0_void_setTCNT0(0);
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	0e 94 1b 03 	call	0x636	; 0x636 <TIMER0_void_setTCNT0>
		EXT0_voidSetSignalch(RISING);
 49a:	87 e0       	ldi	r24, 0x07	; 7
 49c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <EXT0_voidSetSignalch>
		flag = 2;
 4a0:	82 e0       	ldi	r24, 0x02	; 2
 4a2:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <flag>
		ovf = 0;
 4a6:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <ovf+0x1>
 4aa:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <ovf>
 4ae:	08 95       	ret
	}
	else if (flag==2)
 4b0:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <flag>
 4b4:	82 30       	cpi	r24, 0x02	; 2
 4b6:	49 f5       	brne	.+82     	; 0x50a <EXTI0_APP+0xd8>
	{
		toff = ((1024.0/8000000.0) * (float) (TIMER0_void_getTCNT0() + (ovf * 256)));
 4b8:	0e 94 1d 03 	call	0x63a	; 0x63a <TIMER0_void_getTCNT0>
 4bc:	60 e0       	ldi	r22, 0x00	; 0
 4be:	70 e0       	ldi	r23, 0x00	; 0
 4c0:	70 91 7c 00 	lds	r23, 0x007C	; 0x80007c <ovf>
 4c4:	68 0f       	add	r22, r24
 4c6:	71 1d       	adc	r23, r1
 4c8:	07 2e       	mov	r0, r23
 4ca:	00 0c       	add	r0, r0
 4cc:	88 0b       	sbc	r24, r24
 4ce:	99 0b       	sbc	r25, r25
 4d0:	0e 94 66 04 	call	0x8cc	; 0x8cc <__floatsisf>
 4d4:	2d eb       	ldi	r18, 0xBD	; 189
 4d6:	37 e3       	ldi	r19, 0x37	; 55
 4d8:	46 e0       	ldi	r20, 0x06	; 6
 4da:	59 e3       	ldi	r21, 0x39	; 57
 4dc:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__mulsf3>
 4e0:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <__data_end>
 4e4:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <__data_end+0x1>
 4e8:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end+0x2>
 4ec:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x3>
		TIMER0_void_setTCNT0(0);
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	0e 94 1b 03 	call	0x636	; 0x636 <TIMER0_void_setTCNT0>
		EXT0_voidSetSignalch(FALLING);
 4f6:	84 e0       	ldi	r24, 0x04	; 4
 4f8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <EXT0_voidSetSignalch>
		flag = 1;
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <flag>
		ovf = 0;
 502:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <ovf+0x1>
 506:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <ovf>
 50a:	08 95       	ret

0000050c <main>:



int main()
{
	TIMER0_OVERFLOW_void_setCallBack(TOVF_APP);
 50c:	8f e0       	ldi	r24, 0x0F	; 15
 50e:	92 e0       	ldi	r25, 0x02	; 2
 510:	0e 94 23 03 	call	0x646	; 0x646 <TIMER0_OVERFLOW_void_setCallBack>
	EXT0_voidCallBack(EXTI0_APP);
 514:	89 e1       	ldi	r24, 0x19	; 25
 516:	92 e0       	ldi	r25, 0x02	; 2
 518:	0e 94 dd 00 	call	0x1ba	; 0x1ba <EXT0_voidCallBack>
	int duty = 0 ;
	int freq = 0 ;
	float f = 0 ;
	DIO_voidInitialization();
 51c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidInitialization>
	EXT0_voidInit();
 520:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <EXT0_voidInit>
	LCD_vidInit();
 524:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_vidInit>

	TIMER0_void_intialization();
 528:	0e 94 17 03 	call	0x62e	; 0x62e <TIMER0_void_intialization>

	TIMER0_void_overflowInterruptEnable();
 52c:	0e 94 1f 03 	call	0x63e	; 0x63e <TIMER0_void_overflowInterruptEnable>

	EXT0_voidEnable();
 530:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <EXT0_voidEnable>
	GIE_voidEnable();
 534:	0e 94 2d 01 	call	0x25a	; 0x25a <GIE_voidEnable>
	/*	pre 1024 .. mode CTC "Duty 50%" .. F = fcpu/(pre* counts) = 30.5 HZ	*/
	TCCR2 = 0b00011111;
 538:	8f e1       	ldi	r24, 0x1F	; 31
 53a:	85 bd       	out	0x25, r24	; 37
	OCR2 = 127;
 53c:	8f e7       	ldi	r24, 0x7F	; 127
 53e:	83 bd       	out	0x23, r24	; 35

	while(1)
	{
		duty = (100 * ton) /( ton + toff);
 540:	c0 90 78 00 	lds	r12, 0x0078	; 0x800078 <ton>
 544:	d0 90 79 00 	lds	r13, 0x0079	; 0x800079 <ton+0x1>
 548:	e0 90 7a 00 	lds	r14, 0x007A	; 0x80007a <ton+0x2>
 54c:	f0 90 7b 00 	lds	r15, 0x007B	; 0x80007b <ton+0x3>
 550:	20 e0       	ldi	r18, 0x00	; 0
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	48 ec       	ldi	r20, 0xC8	; 200
 556:	52 e4       	ldi	r21, 0x42	; 66
 558:	c7 01       	movw	r24, r14
 55a:	b6 01       	movw	r22, r12
 55c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__mulsf3>
 560:	4b 01       	movw	r8, r22
 562:	5c 01       	movw	r10, r24
 564:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <__data_end>
 568:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <__data_end+0x1>
 56c:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <__data_end+0x2>
 570:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <__data_end+0x3>
 574:	c7 01       	movw	r24, r14
 576:	b6 01       	movw	r22, r12
 578:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__addsf3>
 57c:	6b 01       	movw	r12, r22
 57e:	7c 01       	movw	r14, r24
 580:	9b 01       	movw	r18, r22
 582:	ac 01       	movw	r20, r24
 584:	c5 01       	movw	r24, r10
 586:	b4 01       	movw	r22, r8
 588:	0e 94 bc 03 	call	0x778	; 0x778 <__divsf3>
 58c:	0e 94 2e 04 	call	0x85c	; 0x85c <__fixsfsi>
 590:	8b 01       	movw	r16, r22
		f = 1 / (ton + toff); // Tperiod = TON + TOFF
 592:	a7 01       	movw	r20, r14
 594:	96 01       	movw	r18, r12
 596:	60 e0       	ldi	r22, 0x00	; 0
 598:	70 e0       	ldi	r23, 0x00	; 0
 59a:	80 e8       	ldi	r24, 0x80	; 128
 59c:	9f e3       	ldi	r25, 0x3F	; 63
 59e:	0e 94 bc 03 	call	0x778	; 0x778 <__divsf3>
		freq = (int) f ;
 5a2:	0e 94 2e 04 	call	0x85c	; 0x85c <__fixsfsi>
 5a6:	eb 01       	movw	r28, r22
		LCD_vidSendCmd(0x80);
 5a8:	80 e8       	ldi	r24, 0x80	; 128
 5aa:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_vidSendCmd>
		LCD_vidWriteString((u8 *)"Freq = ");
 5ae:	80 e6       	ldi	r24, 0x60	; 96
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_vidWriteString>
		LCD_vidWriteChar((freq/100)+48);
 5b6:	ce 01       	movw	r24, r28
 5b8:	64 e6       	ldi	r22, 0x64	; 100
 5ba:	70 e0       	ldi	r23, 0x00	; 0
 5bc:	0e 94 5f 05 	call	0xabe	; 0xabe <__divmodhi4>
 5c0:	80 e3       	ldi	r24, 0x30	; 48
 5c2:	86 0f       	add	r24, r22
 5c4:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_vidWriteChar>
		LCD_vidWriteChar(((freq/10)%10)+48);
 5c8:	0f 2e       	mov	r0, r31
 5ca:	fa e0       	ldi	r31, 0x0A	; 10
 5cc:	ef 2e       	mov	r14, r31
 5ce:	f1 2c       	mov	r15, r1
 5d0:	f0 2d       	mov	r31, r0
 5d2:	ce 01       	movw	r24, r28
 5d4:	b7 01       	movw	r22, r14
 5d6:	0e 94 5f 05 	call	0xabe	; 0xabe <__divmodhi4>
 5da:	c8 2f       	mov	r28, r24
 5dc:	cb 01       	movw	r24, r22
 5de:	b7 01       	movw	r22, r14
 5e0:	0e 94 5f 05 	call	0xabe	; 0xabe <__divmodhi4>
 5e4:	80 5d       	subi	r24, 0xD0	; 208
 5e6:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_vidWriteChar>
		LCD_vidWriteChar((freq%10)+48);
 5ea:	c0 5d       	subi	r28, 0xD0	; 208
 5ec:	8c 2f       	mov	r24, r28
 5ee:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_vidWriteChar>
		LCD_vidWriteString((u8 *)" HZ");
 5f2:	88 e6       	ldi	r24, 0x68	; 104
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_vidWriteString>
		LCD_vidGotoXY(2 , 0);
 5fa:	60 e0       	ldi	r22, 0x00	; 0
 5fc:	82 e0       	ldi	r24, 0x02	; 2
 5fe:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_vidGotoXY>
		LCD_vidWriteString((u8 *)  "Duty = ");
 602:	8c e6       	ldi	r24, 0x6C	; 108
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_vidWriteString>
		LCD_vidWriteChar(( duty / 10 ) + 48);
 60a:	c8 01       	movw	r24, r16
 60c:	b7 01       	movw	r22, r14
 60e:	0e 94 5f 05 	call	0xabe	; 0xabe <__divmodhi4>
 612:	80 e3       	ldi	r24, 0x30	; 48
 614:	86 0f       	add	r24, r22
 616:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_vidWriteChar>
		LCD_vidWriteChar(( freq % 10) + 48);
 61a:	8c 2f       	mov	r24, r28
 61c:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_vidWriteChar>
		LCD_vidWriteChar(' ');
 620:	80 e2       	ldi	r24, 0x20	; 32
 622:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_vidWriteChar>
		LCD_vidWriteChar('%');
 626:	85 e2       	ldi	r24, 0x25	; 37
 628:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_vidWriteChar>
 62c:	89 cf       	rjmp	.-238    	; 0x540 <main+0x34>

0000062e <TIMER0_void_intialization>:
	SET_BIT(TIFR, 1);
}

u8 TIMER0_void_getCompareMatchInterruptFlag(void){
	return (GET_BIT(TIFR, 1));
}
 62e:	85 e0       	ldi	r24, 0x05	; 5
 630:	83 bf       	out	0x33, r24	; 51
 632:	12 be       	out	0x32, r1	; 50
 634:	08 95       	ret

00000636 <TIMER0_void_setTCNT0>:
 636:	82 bf       	out	0x32, r24	; 50
 638:	08 95       	ret

0000063a <TIMER0_void_getTCNT0>:
 63a:	82 b7       	in	r24, 0x32	; 50
 63c:	08 95       	ret

0000063e <TIMER0_void_overflowInterruptEnable>:
 63e:	89 b7       	in	r24, 0x39	; 57
 640:	81 60       	ori	r24, 0x01	; 1
 642:	89 bf       	out	0x39, r24	; 57
 644:	08 95       	ret

00000646 <TIMER0_OVERFLOW_void_setCallBack>:


void TIMER0_OVERFLOW_void_setCallBack(pf address_cpy){
	GLOB_TIMER0_OVERFLOW_ISRLocation_ptrToFunc = address_cpy;
 646:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <GLOB_TIMER0_OVERFLOW_ISRLocation_ptrToFunc+0x1>
 64a:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <GLOB_TIMER0_OVERFLOW_ISRLocation_ptrToFunc>
 64e:	08 95       	ret

00000650 <__vector_11>:




void __vector_11 (void) __attribute__ ((signal, used));
void __vector_11 (void){
 650:	1f 92       	push	r1
 652:	0f 92       	push	r0
 654:	0f b6       	in	r0, 0x3f	; 63
 656:	0f 92       	push	r0
 658:	11 24       	eor	r1, r1
 65a:	2f 93       	push	r18
 65c:	3f 93       	push	r19
 65e:	4f 93       	push	r20
 660:	5f 93       	push	r21
 662:	6f 93       	push	r22
 664:	7f 93       	push	r23
 666:	8f 93       	push	r24
 668:	9f 93       	push	r25
 66a:	af 93       	push	r26
 66c:	bf 93       	push	r27
 66e:	ef 93       	push	r30
 670:	ff 93       	push	r31
	GLOB_TIMER0_OVERFLOW_ISRLocation_ptrToFunc();
 672:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <GLOB_TIMER0_OVERFLOW_ISRLocation_ptrToFunc>
 676:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <GLOB_TIMER0_OVERFLOW_ISRLocation_ptrToFunc+0x1>
 67a:	09 95       	icall
}
 67c:	ff 91       	pop	r31
 67e:	ef 91       	pop	r30
 680:	bf 91       	pop	r27
 682:	af 91       	pop	r26
 684:	9f 91       	pop	r25
 686:	8f 91       	pop	r24
 688:	7f 91       	pop	r23
 68a:	6f 91       	pop	r22
 68c:	5f 91       	pop	r21
 68e:	4f 91       	pop	r20
 690:	3f 91       	pop	r19
 692:	2f 91       	pop	r18
 694:	0f 90       	pop	r0
 696:	0f be       	out	0x3f, r0	; 63
 698:	0f 90       	pop	r0
 69a:	1f 90       	pop	r1
 69c:	18 95       	reti

0000069e <__subsf3>:
 69e:	50 58       	subi	r21, 0x80	; 128

000006a0 <__addsf3>:
 6a0:	bb 27       	eor	r27, r27
 6a2:	aa 27       	eor	r26, r26
 6a4:	0e 94 67 03 	call	0x6ce	; 0x6ce <__addsf3x>
 6a8:	0c 94 b8 04 	jmp	0x970	; 0x970 <__fp_round>
 6ac:	0e 94 aa 04 	call	0x954	; 0x954 <__fp_pscA>
 6b0:	38 f0       	brcs	.+14     	; 0x6c0 <__addsf3+0x20>
 6b2:	0e 94 b1 04 	call	0x962	; 0x962 <__fp_pscB>
 6b6:	20 f0       	brcs	.+8      	; 0x6c0 <__addsf3+0x20>
 6b8:	39 f4       	brne	.+14     	; 0x6c8 <__addsf3+0x28>
 6ba:	9f 3f       	cpi	r25, 0xFF	; 255
 6bc:	19 f4       	brne	.+6      	; 0x6c4 <__addsf3+0x24>
 6be:	26 f4       	brtc	.+8      	; 0x6c8 <__addsf3+0x28>
 6c0:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__fp_nan>
 6c4:	0e f4       	brtc	.+2      	; 0x6c8 <__addsf3+0x28>
 6c6:	e0 95       	com	r30
 6c8:	e7 fb       	bst	r30, 7
 6ca:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_inf>

000006ce <__addsf3x>:
 6ce:	e9 2f       	mov	r30, r25
 6d0:	0e 94 c9 04 	call	0x992	; 0x992 <__fp_split3>
 6d4:	58 f3       	brcs	.-42     	; 0x6ac <__addsf3+0xc>
 6d6:	ba 17       	cp	r27, r26
 6d8:	62 07       	cpc	r22, r18
 6da:	73 07       	cpc	r23, r19
 6dc:	84 07       	cpc	r24, r20
 6de:	95 07       	cpc	r25, r21
 6e0:	20 f0       	brcs	.+8      	; 0x6ea <__addsf3x+0x1c>
 6e2:	79 f4       	brne	.+30     	; 0x702 <__addsf3x+0x34>
 6e4:	a6 f5       	brtc	.+104    	; 0x74e <__addsf3x+0x80>
 6e6:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__fp_zero>
 6ea:	0e f4       	brtc	.+2      	; 0x6ee <__addsf3x+0x20>
 6ec:	e0 95       	com	r30
 6ee:	0b 2e       	mov	r0, r27
 6f0:	ba 2f       	mov	r27, r26
 6f2:	a0 2d       	mov	r26, r0
 6f4:	0b 01       	movw	r0, r22
 6f6:	b9 01       	movw	r22, r18
 6f8:	90 01       	movw	r18, r0
 6fa:	0c 01       	movw	r0, r24
 6fc:	ca 01       	movw	r24, r20
 6fe:	a0 01       	movw	r20, r0
 700:	11 24       	eor	r1, r1
 702:	ff 27       	eor	r31, r31
 704:	59 1b       	sub	r21, r25
 706:	99 f0       	breq	.+38     	; 0x72e <__addsf3x+0x60>
 708:	59 3f       	cpi	r21, 0xF9	; 249
 70a:	50 f4       	brcc	.+20     	; 0x720 <__addsf3x+0x52>
 70c:	50 3e       	cpi	r21, 0xE0	; 224
 70e:	68 f1       	brcs	.+90     	; 0x76a <__addsf3x+0x9c>
 710:	1a 16       	cp	r1, r26
 712:	f0 40       	sbci	r31, 0x00	; 0
 714:	a2 2f       	mov	r26, r18
 716:	23 2f       	mov	r18, r19
 718:	34 2f       	mov	r19, r20
 71a:	44 27       	eor	r20, r20
 71c:	58 5f       	subi	r21, 0xF8	; 248
 71e:	f3 cf       	rjmp	.-26     	; 0x706 <__addsf3x+0x38>
 720:	46 95       	lsr	r20
 722:	37 95       	ror	r19
 724:	27 95       	ror	r18
 726:	a7 95       	ror	r26
 728:	f0 40       	sbci	r31, 0x00	; 0
 72a:	53 95       	inc	r21
 72c:	c9 f7       	brne	.-14     	; 0x720 <__addsf3x+0x52>
 72e:	7e f4       	brtc	.+30     	; 0x74e <__addsf3x+0x80>
 730:	1f 16       	cp	r1, r31
 732:	ba 0b       	sbc	r27, r26
 734:	62 0b       	sbc	r22, r18
 736:	73 0b       	sbc	r23, r19
 738:	84 0b       	sbc	r24, r20
 73a:	ba f0       	brmi	.+46     	; 0x76a <__addsf3x+0x9c>
 73c:	91 50       	subi	r25, 0x01	; 1
 73e:	a1 f0       	breq	.+40     	; 0x768 <__addsf3x+0x9a>
 740:	ff 0f       	add	r31, r31
 742:	bb 1f       	adc	r27, r27
 744:	66 1f       	adc	r22, r22
 746:	77 1f       	adc	r23, r23
 748:	88 1f       	adc	r24, r24
 74a:	c2 f7       	brpl	.-16     	; 0x73c <__addsf3x+0x6e>
 74c:	0e c0       	rjmp	.+28     	; 0x76a <__addsf3x+0x9c>
 74e:	ba 0f       	add	r27, r26
 750:	62 1f       	adc	r22, r18
 752:	73 1f       	adc	r23, r19
 754:	84 1f       	adc	r24, r20
 756:	48 f4       	brcc	.+18     	; 0x76a <__addsf3x+0x9c>
 758:	87 95       	ror	r24
 75a:	77 95       	ror	r23
 75c:	67 95       	ror	r22
 75e:	b7 95       	ror	r27
 760:	f7 95       	ror	r31
 762:	9e 3f       	cpi	r25, 0xFE	; 254
 764:	08 f0       	brcs	.+2      	; 0x768 <__addsf3x+0x9a>
 766:	b0 cf       	rjmp	.-160    	; 0x6c8 <__addsf3+0x28>
 768:	93 95       	inc	r25
 76a:	88 0f       	add	r24, r24
 76c:	08 f0       	brcs	.+2      	; 0x770 <__addsf3x+0xa2>
 76e:	99 27       	eor	r25, r25
 770:	ee 0f       	add	r30, r30
 772:	97 95       	ror	r25
 774:	87 95       	ror	r24
 776:	08 95       	ret

00000778 <__divsf3>:
 778:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__divsf3x>
 77c:	0c 94 b8 04 	jmp	0x970	; 0x970 <__fp_round>
 780:	0e 94 b1 04 	call	0x962	; 0x962 <__fp_pscB>
 784:	58 f0       	brcs	.+22     	; 0x79c <__divsf3+0x24>
 786:	0e 94 aa 04 	call	0x954	; 0x954 <__fp_pscA>
 78a:	40 f0       	brcs	.+16     	; 0x79c <__divsf3+0x24>
 78c:	29 f4       	brne	.+10     	; 0x798 <__divsf3+0x20>
 78e:	5f 3f       	cpi	r21, 0xFF	; 255
 790:	29 f0       	breq	.+10     	; 0x79c <__divsf3+0x24>
 792:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_inf>
 796:	51 11       	cpse	r21, r1
 798:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__fp_szero>
 79c:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__fp_nan>

000007a0 <__divsf3x>:
 7a0:	0e 94 c9 04 	call	0x992	; 0x992 <__fp_split3>
 7a4:	68 f3       	brcs	.-38     	; 0x780 <__divsf3+0x8>

000007a6 <__divsf3_pse>:
 7a6:	99 23       	and	r25, r25
 7a8:	b1 f3       	breq	.-20     	; 0x796 <__divsf3+0x1e>
 7aa:	55 23       	and	r21, r21
 7ac:	91 f3       	breq	.-28     	; 0x792 <__divsf3+0x1a>
 7ae:	95 1b       	sub	r25, r21
 7b0:	55 0b       	sbc	r21, r21
 7b2:	bb 27       	eor	r27, r27
 7b4:	aa 27       	eor	r26, r26
 7b6:	62 17       	cp	r22, r18
 7b8:	73 07       	cpc	r23, r19
 7ba:	84 07       	cpc	r24, r20
 7bc:	38 f0       	brcs	.+14     	; 0x7cc <__divsf3_pse+0x26>
 7be:	9f 5f       	subi	r25, 0xFF	; 255
 7c0:	5f 4f       	sbci	r21, 0xFF	; 255
 7c2:	22 0f       	add	r18, r18
 7c4:	33 1f       	adc	r19, r19
 7c6:	44 1f       	adc	r20, r20
 7c8:	aa 1f       	adc	r26, r26
 7ca:	a9 f3       	breq	.-22     	; 0x7b6 <__divsf3_pse+0x10>
 7cc:	35 d0       	rcall	.+106    	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 7ce:	0e 2e       	mov	r0, r30
 7d0:	3a f0       	brmi	.+14     	; 0x7e0 <__divsf3_pse+0x3a>
 7d2:	e0 e8       	ldi	r30, 0x80	; 128
 7d4:	32 d0       	rcall	.+100    	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 7d6:	91 50       	subi	r25, 0x01	; 1
 7d8:	50 40       	sbci	r21, 0x00	; 0
 7da:	e6 95       	lsr	r30
 7dc:	00 1c       	adc	r0, r0
 7de:	ca f7       	brpl	.-14     	; 0x7d2 <__divsf3_pse+0x2c>
 7e0:	2b d0       	rcall	.+86     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 7e2:	fe 2f       	mov	r31, r30
 7e4:	29 d0       	rcall	.+82     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 7e6:	66 0f       	add	r22, r22
 7e8:	77 1f       	adc	r23, r23
 7ea:	88 1f       	adc	r24, r24
 7ec:	bb 1f       	adc	r27, r27
 7ee:	26 17       	cp	r18, r22
 7f0:	37 07       	cpc	r19, r23
 7f2:	48 07       	cpc	r20, r24
 7f4:	ab 07       	cpc	r26, r27
 7f6:	b0 e8       	ldi	r27, 0x80	; 128
 7f8:	09 f0       	breq	.+2      	; 0x7fc <__divsf3_pse+0x56>
 7fa:	bb 0b       	sbc	r27, r27
 7fc:	80 2d       	mov	r24, r0
 7fe:	bf 01       	movw	r22, r30
 800:	ff 27       	eor	r31, r31
 802:	93 58       	subi	r25, 0x83	; 131
 804:	5f 4f       	sbci	r21, 0xFF	; 255
 806:	3a f0       	brmi	.+14     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 808:	9e 3f       	cpi	r25, 0xFE	; 254
 80a:	51 05       	cpc	r21, r1
 80c:	78 f0       	brcs	.+30     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 80e:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_inf>
 812:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__fp_szero>
 816:	5f 3f       	cpi	r21, 0xFF	; 255
 818:	e4 f3       	brlt	.-8      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 81a:	98 3e       	cpi	r25, 0xE8	; 232
 81c:	d4 f3       	brlt	.-12     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 81e:	86 95       	lsr	r24
 820:	77 95       	ror	r23
 822:	67 95       	ror	r22
 824:	b7 95       	ror	r27
 826:	f7 95       	ror	r31
 828:	9f 5f       	subi	r25, 0xFF	; 255
 82a:	c9 f7       	brne	.-14     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 82c:	88 0f       	add	r24, r24
 82e:	91 1d       	adc	r25, r1
 830:	96 95       	lsr	r25
 832:	87 95       	ror	r24
 834:	97 f9       	bld	r25, 7
 836:	08 95       	ret
 838:	e1 e0       	ldi	r30, 0x01	; 1
 83a:	66 0f       	add	r22, r22
 83c:	77 1f       	adc	r23, r23
 83e:	88 1f       	adc	r24, r24
 840:	bb 1f       	adc	r27, r27
 842:	62 17       	cp	r22, r18
 844:	73 07       	cpc	r23, r19
 846:	84 07       	cpc	r24, r20
 848:	ba 07       	cpc	r27, r26
 84a:	20 f0       	brcs	.+8      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 84c:	62 1b       	sub	r22, r18
 84e:	73 0b       	sbc	r23, r19
 850:	84 0b       	sbc	r24, r20
 852:	ba 0b       	sbc	r27, r26
 854:	ee 1f       	adc	r30, r30
 856:	88 f7       	brcc	.-30     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 858:	e0 95       	com	r30
 85a:	08 95       	ret

0000085c <__fixsfsi>:
 85c:	0e 94 35 04 	call	0x86a	; 0x86a <__fixunssfsi>
 860:	68 94       	set
 862:	b1 11       	cpse	r27, r1
 864:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__fp_szero>
 868:	08 95       	ret

0000086a <__fixunssfsi>:
 86a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__fp_splitA>
 86e:	88 f0       	brcs	.+34     	; 0x892 <__fixunssfsi+0x28>
 870:	9f 57       	subi	r25, 0x7F	; 127
 872:	98 f0       	brcs	.+38     	; 0x89a <__fixunssfsi+0x30>
 874:	b9 2f       	mov	r27, r25
 876:	99 27       	eor	r25, r25
 878:	b7 51       	subi	r27, 0x17	; 23
 87a:	b0 f0       	brcs	.+44     	; 0x8a8 <__fixunssfsi+0x3e>
 87c:	e1 f0       	breq	.+56     	; 0x8b6 <__fixunssfsi+0x4c>
 87e:	66 0f       	add	r22, r22
 880:	77 1f       	adc	r23, r23
 882:	88 1f       	adc	r24, r24
 884:	99 1f       	adc	r25, r25
 886:	1a f0       	brmi	.+6      	; 0x88e <__fixunssfsi+0x24>
 888:	ba 95       	dec	r27
 88a:	c9 f7       	brne	.-14     	; 0x87e <__fixunssfsi+0x14>
 88c:	14 c0       	rjmp	.+40     	; 0x8b6 <__fixunssfsi+0x4c>
 88e:	b1 30       	cpi	r27, 0x01	; 1
 890:	91 f0       	breq	.+36     	; 0x8b6 <__fixunssfsi+0x4c>
 892:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__fp_zero>
 896:	b1 e0       	ldi	r27, 0x01	; 1
 898:	08 95       	ret
 89a:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__fp_zero>
 89e:	67 2f       	mov	r22, r23
 8a0:	78 2f       	mov	r23, r24
 8a2:	88 27       	eor	r24, r24
 8a4:	b8 5f       	subi	r27, 0xF8	; 248
 8a6:	39 f0       	breq	.+14     	; 0x8b6 <__fixunssfsi+0x4c>
 8a8:	b9 3f       	cpi	r27, 0xF9	; 249
 8aa:	cc f3       	brlt	.-14     	; 0x89e <__fixunssfsi+0x34>
 8ac:	86 95       	lsr	r24
 8ae:	77 95       	ror	r23
 8b0:	67 95       	ror	r22
 8b2:	b3 95       	inc	r27
 8b4:	d9 f7       	brne	.-10     	; 0x8ac <__fixunssfsi+0x42>
 8b6:	3e f4       	brtc	.+14     	; 0x8c6 <__fixunssfsi+0x5c>
 8b8:	90 95       	com	r25
 8ba:	80 95       	com	r24
 8bc:	70 95       	com	r23
 8be:	61 95       	neg	r22
 8c0:	7f 4f       	sbci	r23, 0xFF	; 255
 8c2:	8f 4f       	sbci	r24, 0xFF	; 255
 8c4:	9f 4f       	sbci	r25, 0xFF	; 255
 8c6:	08 95       	ret

000008c8 <__floatunsisf>:
 8c8:	e8 94       	clt
 8ca:	09 c0       	rjmp	.+18     	; 0x8de <__floatsisf+0x12>

000008cc <__floatsisf>:
 8cc:	97 fb       	bst	r25, 7
 8ce:	3e f4       	brtc	.+14     	; 0x8de <__floatsisf+0x12>
 8d0:	90 95       	com	r25
 8d2:	80 95       	com	r24
 8d4:	70 95       	com	r23
 8d6:	61 95       	neg	r22
 8d8:	7f 4f       	sbci	r23, 0xFF	; 255
 8da:	8f 4f       	sbci	r24, 0xFF	; 255
 8dc:	9f 4f       	sbci	r25, 0xFF	; 255
 8de:	99 23       	and	r25, r25
 8e0:	a9 f0       	breq	.+42     	; 0x90c <__floatsisf+0x40>
 8e2:	f9 2f       	mov	r31, r25
 8e4:	96 e9       	ldi	r25, 0x96	; 150
 8e6:	bb 27       	eor	r27, r27
 8e8:	93 95       	inc	r25
 8ea:	f6 95       	lsr	r31
 8ec:	87 95       	ror	r24
 8ee:	77 95       	ror	r23
 8f0:	67 95       	ror	r22
 8f2:	b7 95       	ror	r27
 8f4:	f1 11       	cpse	r31, r1
 8f6:	f8 cf       	rjmp	.-16     	; 0x8e8 <__floatsisf+0x1c>
 8f8:	fa f4       	brpl	.+62     	; 0x938 <__floatsisf+0x6c>
 8fa:	bb 0f       	add	r27, r27
 8fc:	11 f4       	brne	.+4      	; 0x902 <__floatsisf+0x36>
 8fe:	60 ff       	sbrs	r22, 0
 900:	1b c0       	rjmp	.+54     	; 0x938 <__floatsisf+0x6c>
 902:	6f 5f       	subi	r22, 0xFF	; 255
 904:	7f 4f       	sbci	r23, 0xFF	; 255
 906:	8f 4f       	sbci	r24, 0xFF	; 255
 908:	9f 4f       	sbci	r25, 0xFF	; 255
 90a:	16 c0       	rjmp	.+44     	; 0x938 <__floatsisf+0x6c>
 90c:	88 23       	and	r24, r24
 90e:	11 f0       	breq	.+4      	; 0x914 <__floatsisf+0x48>
 910:	96 e9       	ldi	r25, 0x96	; 150
 912:	11 c0       	rjmp	.+34     	; 0x936 <__floatsisf+0x6a>
 914:	77 23       	and	r23, r23
 916:	21 f0       	breq	.+8      	; 0x920 <__floatsisf+0x54>
 918:	9e e8       	ldi	r25, 0x8E	; 142
 91a:	87 2f       	mov	r24, r23
 91c:	76 2f       	mov	r23, r22
 91e:	05 c0       	rjmp	.+10     	; 0x92a <__floatsisf+0x5e>
 920:	66 23       	and	r22, r22
 922:	71 f0       	breq	.+28     	; 0x940 <__floatsisf+0x74>
 924:	96 e8       	ldi	r25, 0x86	; 134
 926:	86 2f       	mov	r24, r22
 928:	70 e0       	ldi	r23, 0x00	; 0
 92a:	60 e0       	ldi	r22, 0x00	; 0
 92c:	2a f0       	brmi	.+10     	; 0x938 <__floatsisf+0x6c>
 92e:	9a 95       	dec	r25
 930:	66 0f       	add	r22, r22
 932:	77 1f       	adc	r23, r23
 934:	88 1f       	adc	r24, r24
 936:	da f7       	brpl	.-10     	; 0x92e <__floatsisf+0x62>
 938:	88 0f       	add	r24, r24
 93a:	96 95       	lsr	r25
 93c:	87 95       	ror	r24
 93e:	97 f9       	bld	r25, 7
 940:	08 95       	ret

00000942 <__fp_inf>:
 942:	97 f9       	bld	r25, 7
 944:	9f 67       	ori	r25, 0x7F	; 127
 946:	80 e8       	ldi	r24, 0x80	; 128
 948:	70 e0       	ldi	r23, 0x00	; 0
 94a:	60 e0       	ldi	r22, 0x00	; 0
 94c:	08 95       	ret

0000094e <__fp_nan>:
 94e:	9f ef       	ldi	r25, 0xFF	; 255
 950:	80 ec       	ldi	r24, 0xC0	; 192
 952:	08 95       	ret

00000954 <__fp_pscA>:
 954:	00 24       	eor	r0, r0
 956:	0a 94       	dec	r0
 958:	16 16       	cp	r1, r22
 95a:	17 06       	cpc	r1, r23
 95c:	18 06       	cpc	r1, r24
 95e:	09 06       	cpc	r0, r25
 960:	08 95       	ret

00000962 <__fp_pscB>:
 962:	00 24       	eor	r0, r0
 964:	0a 94       	dec	r0
 966:	12 16       	cp	r1, r18
 968:	13 06       	cpc	r1, r19
 96a:	14 06       	cpc	r1, r20
 96c:	05 06       	cpc	r0, r21
 96e:	08 95       	ret

00000970 <__fp_round>:
 970:	09 2e       	mov	r0, r25
 972:	03 94       	inc	r0
 974:	00 0c       	add	r0, r0
 976:	11 f4       	brne	.+4      	; 0x97c <__fp_round+0xc>
 978:	88 23       	and	r24, r24
 97a:	52 f0       	brmi	.+20     	; 0x990 <__fp_round+0x20>
 97c:	bb 0f       	add	r27, r27
 97e:	40 f4       	brcc	.+16     	; 0x990 <__fp_round+0x20>
 980:	bf 2b       	or	r27, r31
 982:	11 f4       	brne	.+4      	; 0x988 <__fp_round+0x18>
 984:	60 ff       	sbrs	r22, 0
 986:	04 c0       	rjmp	.+8      	; 0x990 <__fp_round+0x20>
 988:	6f 5f       	subi	r22, 0xFF	; 255
 98a:	7f 4f       	sbci	r23, 0xFF	; 255
 98c:	8f 4f       	sbci	r24, 0xFF	; 255
 98e:	9f 4f       	sbci	r25, 0xFF	; 255
 990:	08 95       	ret

00000992 <__fp_split3>:
 992:	57 fd       	sbrc	r21, 7
 994:	90 58       	subi	r25, 0x80	; 128
 996:	44 0f       	add	r20, r20
 998:	55 1f       	adc	r21, r21
 99a:	59 f0       	breq	.+22     	; 0x9b2 <__fp_splitA+0x10>
 99c:	5f 3f       	cpi	r21, 0xFF	; 255
 99e:	71 f0       	breq	.+28     	; 0x9bc <__fp_splitA+0x1a>
 9a0:	47 95       	ror	r20

000009a2 <__fp_splitA>:
 9a2:	88 0f       	add	r24, r24
 9a4:	97 fb       	bst	r25, 7
 9a6:	99 1f       	adc	r25, r25
 9a8:	61 f0       	breq	.+24     	; 0x9c2 <__fp_splitA+0x20>
 9aa:	9f 3f       	cpi	r25, 0xFF	; 255
 9ac:	79 f0       	breq	.+30     	; 0x9cc <__fp_splitA+0x2a>
 9ae:	87 95       	ror	r24
 9b0:	08 95       	ret
 9b2:	12 16       	cp	r1, r18
 9b4:	13 06       	cpc	r1, r19
 9b6:	14 06       	cpc	r1, r20
 9b8:	55 1f       	adc	r21, r21
 9ba:	f2 cf       	rjmp	.-28     	; 0x9a0 <__fp_split3+0xe>
 9bc:	46 95       	lsr	r20
 9be:	f1 df       	rcall	.-30     	; 0x9a2 <__fp_splitA>
 9c0:	08 c0       	rjmp	.+16     	; 0x9d2 <__fp_splitA+0x30>
 9c2:	16 16       	cp	r1, r22
 9c4:	17 06       	cpc	r1, r23
 9c6:	18 06       	cpc	r1, r24
 9c8:	99 1f       	adc	r25, r25
 9ca:	f1 cf       	rjmp	.-30     	; 0x9ae <__fp_splitA+0xc>
 9cc:	86 95       	lsr	r24
 9ce:	71 05       	cpc	r23, r1
 9d0:	61 05       	cpc	r22, r1
 9d2:	08 94       	sec
 9d4:	08 95       	ret

000009d6 <__fp_zero>:
 9d6:	e8 94       	clt

000009d8 <__fp_szero>:
 9d8:	bb 27       	eor	r27, r27
 9da:	66 27       	eor	r22, r22
 9dc:	77 27       	eor	r23, r23
 9de:	cb 01       	movw	r24, r22
 9e0:	97 f9       	bld	r25, 7
 9e2:	08 95       	ret

000009e4 <__mulsf3>:
 9e4:	0e 94 05 05 	call	0xa0a	; 0xa0a <__mulsf3x>
 9e8:	0c 94 b8 04 	jmp	0x970	; 0x970 <__fp_round>
 9ec:	0e 94 aa 04 	call	0x954	; 0x954 <__fp_pscA>
 9f0:	38 f0       	brcs	.+14     	; 0xa00 <__mulsf3+0x1c>
 9f2:	0e 94 b1 04 	call	0x962	; 0x962 <__fp_pscB>
 9f6:	20 f0       	brcs	.+8      	; 0xa00 <__mulsf3+0x1c>
 9f8:	95 23       	and	r25, r21
 9fa:	11 f0       	breq	.+4      	; 0xa00 <__mulsf3+0x1c>
 9fc:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_inf>
 a00:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__fp_nan>
 a04:	11 24       	eor	r1, r1
 a06:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__fp_szero>

00000a0a <__mulsf3x>:
 a0a:	0e 94 c9 04 	call	0x992	; 0x992 <__fp_split3>
 a0e:	70 f3       	brcs	.-36     	; 0x9ec <__mulsf3+0x8>

00000a10 <__mulsf3_pse>:
 a10:	95 9f       	mul	r25, r21
 a12:	c1 f3       	breq	.-16     	; 0xa04 <__mulsf3+0x20>
 a14:	95 0f       	add	r25, r21
 a16:	50 e0       	ldi	r21, 0x00	; 0
 a18:	55 1f       	adc	r21, r21
 a1a:	62 9f       	mul	r22, r18
 a1c:	f0 01       	movw	r30, r0
 a1e:	72 9f       	mul	r23, r18
 a20:	bb 27       	eor	r27, r27
 a22:	f0 0d       	add	r31, r0
 a24:	b1 1d       	adc	r27, r1
 a26:	63 9f       	mul	r22, r19
 a28:	aa 27       	eor	r26, r26
 a2a:	f0 0d       	add	r31, r0
 a2c:	b1 1d       	adc	r27, r1
 a2e:	aa 1f       	adc	r26, r26
 a30:	64 9f       	mul	r22, r20
 a32:	66 27       	eor	r22, r22
 a34:	b0 0d       	add	r27, r0
 a36:	a1 1d       	adc	r26, r1
 a38:	66 1f       	adc	r22, r22
 a3a:	82 9f       	mul	r24, r18
 a3c:	22 27       	eor	r18, r18
 a3e:	b0 0d       	add	r27, r0
 a40:	a1 1d       	adc	r26, r1
 a42:	62 1f       	adc	r22, r18
 a44:	73 9f       	mul	r23, r19
 a46:	b0 0d       	add	r27, r0
 a48:	a1 1d       	adc	r26, r1
 a4a:	62 1f       	adc	r22, r18
 a4c:	83 9f       	mul	r24, r19
 a4e:	a0 0d       	add	r26, r0
 a50:	61 1d       	adc	r22, r1
 a52:	22 1f       	adc	r18, r18
 a54:	74 9f       	mul	r23, r20
 a56:	33 27       	eor	r19, r19
 a58:	a0 0d       	add	r26, r0
 a5a:	61 1d       	adc	r22, r1
 a5c:	23 1f       	adc	r18, r19
 a5e:	84 9f       	mul	r24, r20
 a60:	60 0d       	add	r22, r0
 a62:	21 1d       	adc	r18, r1
 a64:	82 2f       	mov	r24, r18
 a66:	76 2f       	mov	r23, r22
 a68:	6a 2f       	mov	r22, r26
 a6a:	11 24       	eor	r1, r1
 a6c:	9f 57       	subi	r25, 0x7F	; 127
 a6e:	50 40       	sbci	r21, 0x00	; 0
 a70:	9a f0       	brmi	.+38     	; 0xa98 <__mulsf3_pse+0x88>
 a72:	f1 f0       	breq	.+60     	; 0xab0 <__mulsf3_pse+0xa0>
 a74:	88 23       	and	r24, r24
 a76:	4a f0       	brmi	.+18     	; 0xa8a <__mulsf3_pse+0x7a>
 a78:	ee 0f       	add	r30, r30
 a7a:	ff 1f       	adc	r31, r31
 a7c:	bb 1f       	adc	r27, r27
 a7e:	66 1f       	adc	r22, r22
 a80:	77 1f       	adc	r23, r23
 a82:	88 1f       	adc	r24, r24
 a84:	91 50       	subi	r25, 0x01	; 1
 a86:	50 40       	sbci	r21, 0x00	; 0
 a88:	a9 f7       	brne	.-22     	; 0xa74 <__mulsf3_pse+0x64>
 a8a:	9e 3f       	cpi	r25, 0xFE	; 254
 a8c:	51 05       	cpc	r21, r1
 a8e:	80 f0       	brcs	.+32     	; 0xab0 <__mulsf3_pse+0xa0>
 a90:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_inf>
 a94:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__fp_szero>
 a98:	5f 3f       	cpi	r21, 0xFF	; 255
 a9a:	e4 f3       	brlt	.-8      	; 0xa94 <__mulsf3_pse+0x84>
 a9c:	98 3e       	cpi	r25, 0xE8	; 232
 a9e:	d4 f3       	brlt	.-12     	; 0xa94 <__mulsf3_pse+0x84>
 aa0:	86 95       	lsr	r24
 aa2:	77 95       	ror	r23
 aa4:	67 95       	ror	r22
 aa6:	b7 95       	ror	r27
 aa8:	f7 95       	ror	r31
 aaa:	e7 95       	ror	r30
 aac:	9f 5f       	subi	r25, 0xFF	; 255
 aae:	c1 f7       	brne	.-16     	; 0xaa0 <__mulsf3_pse+0x90>
 ab0:	fe 2b       	or	r31, r30
 ab2:	88 0f       	add	r24, r24
 ab4:	91 1d       	adc	r25, r1
 ab6:	96 95       	lsr	r25
 ab8:	87 95       	ror	r24
 aba:	97 f9       	bld	r25, 7
 abc:	08 95       	ret

00000abe <__divmodhi4>:
 abe:	97 fb       	bst	r25, 7
 ac0:	07 2e       	mov	r0, r23
 ac2:	16 f4       	brtc	.+4      	; 0xac8 <__divmodhi4+0xa>
 ac4:	00 94       	com	r0
 ac6:	07 d0       	rcall	.+14     	; 0xad6 <__divmodhi4_neg1>
 ac8:	77 fd       	sbrc	r23, 7
 aca:	09 d0       	rcall	.+18     	; 0xade <__divmodhi4_neg2>
 acc:	0e 94 73 05 	call	0xae6	; 0xae6 <__udivmodhi4>
 ad0:	07 fc       	sbrc	r0, 7
 ad2:	05 d0       	rcall	.+10     	; 0xade <__divmodhi4_neg2>
 ad4:	3e f4       	brtc	.+14     	; 0xae4 <__divmodhi4_exit>

00000ad6 <__divmodhi4_neg1>:
 ad6:	90 95       	com	r25
 ad8:	81 95       	neg	r24
 ada:	9f 4f       	sbci	r25, 0xFF	; 255
 adc:	08 95       	ret

00000ade <__divmodhi4_neg2>:
 ade:	70 95       	com	r23
 ae0:	61 95       	neg	r22
 ae2:	7f 4f       	sbci	r23, 0xFF	; 255

00000ae4 <__divmodhi4_exit>:
 ae4:	08 95       	ret

00000ae6 <__udivmodhi4>:
 ae6:	aa 1b       	sub	r26, r26
 ae8:	bb 1b       	sub	r27, r27
 aea:	51 e1       	ldi	r21, 0x11	; 17
 aec:	07 c0       	rjmp	.+14     	; 0xafc <__udivmodhi4_ep>

00000aee <__udivmodhi4_loop>:
 aee:	aa 1f       	adc	r26, r26
 af0:	bb 1f       	adc	r27, r27
 af2:	a6 17       	cp	r26, r22
 af4:	b7 07       	cpc	r27, r23
 af6:	10 f0       	brcs	.+4      	; 0xafc <__udivmodhi4_ep>
 af8:	a6 1b       	sub	r26, r22
 afa:	b7 0b       	sbc	r27, r23

00000afc <__udivmodhi4_ep>:
 afc:	88 1f       	adc	r24, r24
 afe:	99 1f       	adc	r25, r25
 b00:	5a 95       	dec	r21
 b02:	a9 f7       	brne	.-22     	; 0xaee <__udivmodhi4_loop>
 b04:	80 95       	com	r24
 b06:	90 95       	com	r25
 b08:	bc 01       	movw	r22, r24
 b0a:	cd 01       	movw	r24, r26
 b0c:	08 95       	ret

00000b0e <_exit>:
 b0e:	f8 94       	cli

00000b10 <__stop_program>:
 b10:	ff cf       	rjmp	.-2      	; 0xb10 <__stop_program>
