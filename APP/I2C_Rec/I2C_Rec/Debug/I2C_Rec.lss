
I2C_Rec.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b81  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000729  00000000  00000000  00001005  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007bf  00000000  00000000  0000172e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  00001ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e1  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000091c  00000000  00000000  0000263d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00002f59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4b 01 	call	0x296	; 0x296 <main>
  64:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidSetPinDirection>:
DIO_voidSetPinDirection(PORTA,PIN0,OUTPUT); (DDRA,0) = 1;
*/
void		DIO_voidSetPinDirection(u8 PortID ,u8 PinID ,u8 Direction )
{
	/*		Range Check									*/
	if(PortID < 4 && PinID < 8)
  6c:	84 30       	cpi	r24, 0x04	; 4
  6e:	08 f0       	brcs	.+2      	; 0x72 <DIO_voidSetPinDirection+0x6>
  70:	72 c0       	rjmp	.+228    	; 0x156 <DIO_voidSetPinDirection+0xea>
  72:	68 30       	cpi	r22, 0x08	; 8
  74:	08 f0       	brcs	.+2      	; 0x78 <DIO_voidSetPinDirection+0xc>
  76:	6f c0       	rjmp	.+222    	; 0x156 <DIO_voidSetPinDirection+0xea>
	{
		if(Direction == OUTPUT)
  78:	41 30       	cpi	r20, 0x01	; 1
  7a:	a1 f5       	brne	.+104    	; 0xe4 <DIO_voidSetPinDirection+0x78>
		{
			switch(PortID)
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	89 f0       	breq	.+34     	; 0xa2 <DIO_voidSetPinDirection+0x36>
  80:	28 f0       	brcs	.+10     	; 0x8c <DIO_voidSetPinDirection+0x20>
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	c9 f0       	breq	.+50     	; 0xb8 <DIO_voidSetPinDirection+0x4c>
  86:	83 30       	cpi	r24, 0x03	; 3
  88:	11 f1       	breq	.+68     	; 0xce <DIO_voidSetPinDirection+0x62>
  8a:	08 95       	ret
			{
				case PORTA :	SET_BIT(DDRA_REG,PinID);	break;
  8c:	2a b3       	in	r18, 0x1a	; 26
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	02 c0       	rjmp	.+4      	; 0x98 <DIO_voidSetPinDirection+0x2c>
  94:	88 0f       	add	r24, r24
  96:	99 1f       	adc	r25, r25
  98:	6a 95       	dec	r22
  9a:	e2 f7       	brpl	.-8      	; 0x94 <DIO_voidSetPinDirection+0x28>
  9c:	82 2b       	or	r24, r18
  9e:	8a bb       	out	0x1a, r24	; 26
  a0:	08 95       	ret
				case PORTB :	SET_BIT(DDRB_REG,PinID);	break;
  a2:	27 b3       	in	r18, 0x17	; 23
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <DIO_voidSetPinDirection+0x42>
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	6a 95       	dec	r22
  b0:	e2 f7       	brpl	.-8      	; 0xaa <DIO_voidSetPinDirection+0x3e>
  b2:	82 2b       	or	r24, r18
  b4:	87 bb       	out	0x17, r24	; 23
  b6:	08 95       	ret
				case PORTC :	SET_BIT(DDRC_REG,PinID);	break;
  b8:	24 b3       	in	r18, 0x14	; 20
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <DIO_voidSetPinDirection+0x58>
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	6a 95       	dec	r22
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <DIO_voidSetPinDirection+0x54>
  c8:	82 2b       	or	r24, r18
  ca:	84 bb       	out	0x14, r24	; 20
  cc:	08 95       	ret
				case PORTD :	SET_BIT(DDRD_REG,PinID);	break;
  ce:	21 b3       	in	r18, 0x11	; 17
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_voidSetPinDirection+0x6e>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_voidSetPinDirection+0x6a>
  de:	82 2b       	or	r24, r18
  e0:	81 bb       	out	0x11, r24	; 17
  e2:	08 95       	ret
			}
		}else if(Direction == INPUT)
  e4:	41 11       	cpse	r20, r1
  e6:	37 c0       	rjmp	.+110    	; 0x156 <DIO_voidSetPinDirection+0xea>
		{
			switch(PortID)
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	91 f0       	breq	.+36     	; 0x110 <DIO_voidSetPinDirection+0xa4>
  ec:	28 f0       	brcs	.+10     	; 0xf8 <DIO_voidSetPinDirection+0x8c>
  ee:	82 30       	cpi	r24, 0x02	; 2
  f0:	d9 f0       	breq	.+54     	; 0x128 <DIO_voidSetPinDirection+0xbc>
  f2:	83 30       	cpi	r24, 0x03	; 3
  f4:	29 f1       	breq	.+74     	; 0x140 <DIO_voidSetPinDirection+0xd4>
  f6:	08 95       	ret
			{
				case PORTA :	CLR_BIT(DDRA_REG,PinID);	break;
  f8:	2a b3       	in	r18, 0x1a	; 26
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_voidSetPinDirection+0x98>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_voidSetPinDirection+0x94>
 108:	80 95       	com	r24
 10a:	82 23       	and	r24, r18
 10c:	8a bb       	out	0x1a, r24	; 26
 10e:	08 95       	ret
				case PORTB :	CLR_BIT(DDRB_REG,PinID);	break;
 110:	27 b3       	in	r18, 0x17	; 23
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_voidSetPinDirection+0xb0>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_voidSetPinDirection+0xac>
 120:	80 95       	com	r24
 122:	82 23       	and	r24, r18
 124:	87 bb       	out	0x17, r24	; 23
 126:	08 95       	ret
				case PORTC :	CLR_BIT(DDRC_REG,PinID);	break;
 128:	24 b3       	in	r18, 0x14	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_voidSetPinDirection+0xc8>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_voidSetPinDirection+0xc4>
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	84 bb       	out	0x14, r24	; 20
 13e:	08 95       	ret
				case PORTD :	CLR_BIT(DDRD_REG,PinID);	break;
 140:	21 b3       	in	r18, 0x11	; 17
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_voidSetPinDirection+0xe0>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_voidSetPinDirection+0xdc>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	81 bb       	out	0x11, r24	; 17
 156:	08 95       	ret

00000158 <DIO_voidSetPinValue>:
DIO_voidSetPinValue(PORTA,PIN0,HIGH); (PORTA,0) = 1;
*/
void		DIO_voidSetPinValue(u8 PortID ,u8 PinID ,u8 Value )
{
	/*		Range Check									*/
	if(PortID < 4 && PinID < 8)
 158:	84 30       	cpi	r24, 0x04	; 4
 15a:	08 f0       	brcs	.+2      	; 0x15e <DIO_voidSetPinValue+0x6>
 15c:	72 c0       	rjmp	.+228    	; 0x242 <DIO_voidSetPinValue+0xea>
 15e:	68 30       	cpi	r22, 0x08	; 8
 160:	08 f0       	brcs	.+2      	; 0x164 <DIO_voidSetPinValue+0xc>
 162:	6f c0       	rjmp	.+222    	; 0x242 <DIO_voidSetPinValue+0xea>
	{
		if(Value == HIGH)
 164:	41 30       	cpi	r20, 0x01	; 1
 166:	a1 f5       	brne	.+104    	; 0x1d0 <DIO_voidSetPinValue+0x78>
		{
			switch(PortID)
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	89 f0       	breq	.+34     	; 0x18e <DIO_voidSetPinValue+0x36>
 16c:	28 f0       	brcs	.+10     	; 0x178 <DIO_voidSetPinValue+0x20>
 16e:	82 30       	cpi	r24, 0x02	; 2
 170:	c9 f0       	breq	.+50     	; 0x1a4 <DIO_voidSetPinValue+0x4c>
 172:	83 30       	cpi	r24, 0x03	; 3
 174:	11 f1       	breq	.+68     	; 0x1ba <DIO_voidSetPinValue+0x62>
 176:	08 95       	ret
			{
				case PORTA :	SET_BIT(PORTA_REG,PinID);	break;
 178:	2b b3       	in	r18, 0x1b	; 27
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_voidSetPinValue+0x2c>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	6a 95       	dec	r22
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_voidSetPinValue+0x28>
 188:	82 2b       	or	r24, r18
 18a:	8b bb       	out	0x1b, r24	; 27
 18c:	08 95       	ret
				case PORTB :	SET_BIT(PORTB_REG,PinID);	break;
 18e:	28 b3       	in	r18, 0x18	; 24
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_voidSetPinValue+0x42>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_voidSetPinValue+0x3e>
 19e:	82 2b       	or	r24, r18
 1a0:	88 bb       	out	0x18, r24	; 24
 1a2:	08 95       	ret
				case PORTC :	SET_BIT(PORTC_REG,PinID);	break;
 1a4:	25 b3       	in	r18, 0x15	; 21
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_voidSetPinValue+0x58>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_voidSetPinValue+0x54>
 1b4:	82 2b       	or	r24, r18
 1b6:	85 bb       	out	0x15, r24	; 21
 1b8:	08 95       	ret
				case PORTD :	SET_BIT(PORTD_REG,PinID);	break;
 1ba:	22 b3       	in	r18, 0x12	; 18
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_voidSetPinValue+0x6e>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_voidSetPinValue+0x6a>
 1ca:	82 2b       	or	r24, r18
 1cc:	82 bb       	out	0x12, r24	; 18
 1ce:	08 95       	ret
			}
		}else if(Value == LOW)
 1d0:	41 11       	cpse	r20, r1
 1d2:	37 c0       	rjmp	.+110    	; 0x242 <DIO_voidSetPinValue+0xea>
		{
			switch(PortID)
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	91 f0       	breq	.+36     	; 0x1fc <DIO_voidSetPinValue+0xa4>
 1d8:	28 f0       	brcs	.+10     	; 0x1e4 <DIO_voidSetPinValue+0x8c>
 1da:	82 30       	cpi	r24, 0x02	; 2
 1dc:	d9 f0       	breq	.+54     	; 0x214 <DIO_voidSetPinValue+0xbc>
 1de:	83 30       	cpi	r24, 0x03	; 3
 1e0:	29 f1       	breq	.+74     	; 0x22c <DIO_voidSetPinValue+0xd4>
 1e2:	08 95       	ret
			{
				case PORTA :	CLR_BIT(PORTA_REG,PinID);	break;
 1e4:	2b b3       	in	r18, 0x1b	; 27
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_voidSetPinValue+0x98>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_voidSetPinValue+0x94>
 1f4:	80 95       	com	r24
 1f6:	82 23       	and	r24, r18
 1f8:	8b bb       	out	0x1b, r24	; 27
 1fa:	08 95       	ret
				case PORTB :	CLR_BIT(PORTB_REG,PinID);	break;
 1fc:	28 b3       	in	r18, 0x18	; 24
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_voidSetPinValue+0xb0>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_voidSetPinValue+0xac>
 20c:	80 95       	com	r24
 20e:	82 23       	and	r24, r18
 210:	88 bb       	out	0x18, r24	; 24
 212:	08 95       	ret
				case PORTC :	CLR_BIT(PORTC_REG,PinID);	break;
 214:	25 b3       	in	r18, 0x15	; 21
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_voidSetPinValue+0xc8>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_voidSetPinValue+0xc4>
 224:	80 95       	com	r24
 226:	82 23       	and	r24, r18
 228:	85 bb       	out	0x15, r24	; 21
 22a:	08 95       	ret
				case PORTD :	CLR_BIT(PORTD_REG,PinID);	break;
 22c:	22 b3       	in	r18, 0x12	; 18
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_voidSetPinValue+0xe0>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_voidSetPinValue+0xdc>
 23c:	80 95       	com	r24
 23e:	82 23       	and	r24, r18
 240:	82 bb       	out	0x12, r24	; 18
 242:	08 95       	ret

00000244 <I2C_Slave_voidInit>:
{

	/*		Send the stop condition  */
	SET_BIT(TWCR_REG,TWSTO);
	/*		Turn off the flag  */
	SET_BIT(TWCR_REG,TWINT);
 244:	98 e4       	ldi	r25, 0x48	; 72
 246:	90 b9       	out	0x00, r25	; 0
 248:	91 b1       	in	r25, 0x01	; 1
 24a:	9e 7f       	andi	r25, 0xFE	; 254
 24c:	91 b9       	out	0x01, r25	; 1
 24e:	91 b1       	in	r25, 0x01	; 1
 250:	9d 7f       	andi	r25, 0xFD	; 253
 252:	91 b9       	out	0x01, r25	; 1
 254:	96 b7       	in	r25, 0x36	; 54
 256:	90 64       	ori	r25, 0x40	; 64
 258:	96 bf       	out	0x36, r25	; 54
 25a:	92 b1       	in	r25, 0x02	; 2
 25c:	9e 7f       	andi	r25, 0xFE	; 254
 25e:	92 b9       	out	0x02, r25	; 2
 260:	96 b7       	in	r25, 0x36	; 54
 262:	94 60       	ori	r25, 0x04	; 4
 264:	96 bf       	out	0x36, r25	; 54
 266:	88 0f       	add	r24, r24
 268:	82 b9       	out	0x02, r24	; 2
 26a:	08 95       	ret

0000026c <I2C_Slave_voidListen>:

void	I2C_Slave_voidListen(void)
{
	
	/*		Polling on the flag*/
	while (!(TWCR_REG &  (1<<TWINT)));
 26c:	06 b6       	in	r0, 0x36	; 54
 26e:	07 fe       	sbrs	r0, 7
 270:	fd cf       	rjmp	.-6      	; 0x26c <I2C_Slave_voidListen>
	
}
 272:	08 95       	ret

00000274 <I2C_Slave_enuReadu8Data>:
I2C_Error_State   I2C_Slave_enuReadu8Data(u8* I2C_Data)
{
 274:	fc 01       	movw	r30, r24
	I2C_Error_State Local_enuError= I2C_OK;
	/*		Turn off the flag  */
	SET_BIT(TWCR_REG,TWINT);
 276:	96 b7       	in	r25, 0x36	; 54
 278:	90 68       	ori	r25, 0x80	; 128
 27a:	96 bf       	out	0x36, r25	; 54
	/*		Polling on the flag*/
	while (!(TWCR_REG &  (1<<TWINT)));
 27c:	06 b6       	in	r0, 0x36	; 54
 27e:	07 fe       	sbrs	r0, 7
 280:	fd cf       	rjmp	.-6      	; 0x27c <I2C_Slave_enuReadu8Data+0x8>
	if ((TWSR_REG & 0xF8)!=I2C_SR_DATA_ACK)
 282:	91 b1       	in	r25, 0x01	; 1
 284:	98 7f       	andi	r25, 0xF8	; 248
 286:	90 38       	cpi	r25, 0x80	; 128
 288:	21 f4       	brne	.+8      	; 0x292 <I2C_Slave_enuReadu8Data+0x1e>
	{
		Local_enuError= I2C_SR_DATA_ERROR;
	}
	else
	{
		*I2C_Data =TWDR_REG;
 28a:	83 b1       	in	r24, 0x03	; 3
 28c:	80 83       	st	Z, r24
	while (!(TWCR_REG &  (1<<TWINT)));
	
}
I2C_Error_State   I2C_Slave_enuReadu8Data(u8* I2C_Data)
{
	I2C_Error_State Local_enuError= I2C_OK;
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	08 95       	ret
	SET_BIT(TWCR_REG,TWINT);
	/*		Polling on the flag*/
	while (!(TWCR_REG &  (1<<TWINT)));
	if ((TWSR_REG & 0xF8)!=I2C_SR_DATA_ACK)
	{
		Local_enuError= I2C_SR_DATA_ERROR;
 292:	87 e0       	ldi	r24, 0x07	; 7
	else
	{
		*I2C_Data =TWDR_REG;
	}
	return Local_enuError;
}
 294:	08 95       	ret

00000296 <main>:
#include "I2C_interface.h"

int main(void)
{
	
	DIO_voidSetPinDirection(PORTA,PIN0,OUTPUT);
 296:	41 e0       	ldi	r20, 0x01	; 1
 298:	60 e0       	ldi	r22, 0x00	; 0
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
	I2C_Slave_voidInit(0x10);
 2a0:	80 e1       	ldi	r24, 0x10	; 16
 2a2:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Slave_voidInit>
	I2C_Error_State Error=I2C_OK;
	u8* Data=0;
	while (1)
	{
		I2C_Slave_voidListen();		
 2a6:	0e 94 36 01 	call	0x26c	; 0x26c <I2C_Slave_voidListen>
		Error=I2C_Slave_enuReadu8Data(Data);
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 3a 01 	call	0x274	; 0x274 <I2C_Slave_enuReadu8Data>
		if( Error== I2C_OK && *Data =='H')
 2b2:	81 11       	cpse	r24, r1
 2b4:	09 c0       	rjmp	.+18     	; 0x2c8 <main+0x32>
 2b6:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
 2ba:	98 34       	cpi	r25, 0x48	; 72
 2bc:	29 f4       	brne	.+10     	; 0x2c8 <main+0x32>
		{
			DIO_voidSetPinValue(PORTA,PIN0,HIGH);
 2be:	41 e0       	ldi	r20, 0x01	; 1
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_voidSetPinValue>
 2c6:	ef cf       	rjmp	.-34     	; 0x2a6 <main+0x10>
		
		}
		else if ( Error== I2C_OK && *Data =='L')
 2c8:	81 11       	cpse	r24, r1
 2ca:	ed cf       	rjmp	.-38     	; 0x2a6 <main+0x10>
 2cc:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
 2d0:	8c 34       	cpi	r24, 0x4C	; 76
 2d2:	49 f7       	brne	.-46     	; 0x2a6 <main+0x10>
		{
			DIO_voidSetPinValue(PORTA,PIN0,LOW);
 2d4:	40 e0       	ldi	r20, 0x00	; 0
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_voidSetPinValue>
 2de:	e3 cf       	rjmp	.-58     	; 0x2a6 <main+0x10>

000002e0 <_exit>:
 2e0:	f8 94       	cli

000002e2 <__stop_program>:
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <__stop_program>
